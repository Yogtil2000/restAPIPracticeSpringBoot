If you want to use the quick and dirty test to show the things to the customers-----> use the "spring data rest"
before implementing the spring data rest just implement the spring data jpa 

====> If you just added the spring-boot-starter-data-jpa and spring-boot-starter-data-rest 
and run the application then its "faild"===> because you didn't added any datasource

ERROR description :
Description:

Failed to configure a DataSource: 'url' attribute is not specified and no embedded datasource could be configured.

Reason: Failed to determine a suitable driver class


TO solve this add the dependency of H2 in the pom.xml

<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>   ============> added this because , only want to be available at the rumtime , this don't want to be part of jar file
		</dependency>
		
		spring.datasource.url=jdbc:h2:mem:testdb ======> to provide the static source 
		
--------------------------------------------------------------------------------------------------------------------------------------------
"CommandLineRunner":   it is class , need to managed by spring so @Component and it implements CommandLineRunner interface (make sure take our class name something different other than CommandLineRunner)
When you want to perform the operations at the startup of the application then use the concept of the CommandLineRunner 
so using which all the database operations are performed at the startup of application which using the entity of yours 

--------------------------------------------------------------------
spring.jpa.show-sql=true     ====> add this to see the sql queries running behind the scenes 
==================================================================================================
Spring data JPA provides a way basically to add the userDefined or Custom methods as well 
    just need to make the proper definition of that method into the interface where we extending the JpaRepository 
       and then call that method from the commandLineRunner 
       
       
       Noticed one thing that even if the "@Repository " not written on the interface which is extending the JpaRepository still everything is working ?????
======================================================================================================
Using the spring data Rest we are able to automatically expoosed the APIs there
step 1) Need to add the starter for the spring data rest 
step 2) Need to create the interface another as the repository 

     now when you hit http://localhost:8080    then you see based on the entity name the URL exposing has been started 
     
     like as below :
     
     {
			"_links": {
			"userDetailses": {
						"href": "http://localhost:8080/userDetailses{?page,size,sort}",
						"templated": true
			},
			"profile": {
			         "href": "http://localhost:8080/profile"
			}
			}
      }       




		
		